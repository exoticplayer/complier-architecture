#include "cache.h"
#include "ooo_cpu.h"
#include "utils.h";

// initialize replacement state
void CACHE::llc_initialize_replacement()
{

}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    for(uint32_t way = 0; way < NUM_WAY; way++) {
        if(!block[set][way].valid)
            return way;
    }

    int in_L2, in_L2_counter, in_R_L2; /* R -> requester */
    int lru_way_in_LLC = -1, lru_way_in_R_L2 = -1;
    int ways_in_other_L2_counter = 0;
    vector<pair<uint32_t, uint32_t>> priority = get_priority(set);
    assert(priority.size() == NUM_WAY);
    for(uint32_t way = 0; way < NUM_WAY; way++)
    {
        in_L2 = 0, in_L2_counter = 0, in_R_L2 = 0;
        for(int cpu_id = 0; cpu_id < NUM_CPUS; cpu_id++) {
            if(ooo_cpu[cpu_id].L2C.search(block[set][way].address)) {
                in_L2 = 1;
                in_L2_counter++;
                if(cpu_id == cpu) {
                   in_R_L2 = 1;
                }
                else {
                    ways_in_other_L2_counter++;
                }
            }
        }

        if(!in_L2) {
            if(lru_way_in_LLC == -1) lru_way_in_LLC = way;
            else if(priority[way].second > priority[lru_way_in_LLC].second) {
                lru_way_in_LLC = way;
            }
        }

        else if((in_R_L2) && (in_L2_counter == 1)) { /* in R's L2 only */
            if(lru_way_in_R_L2 == -1) lru_way_in_R_L2 = way;
            else if(priority[way].second > priority[lru_way_in_R_L2].second) {
                lru_way_in_R_L2 = way;
            }
        }
    }

    // Our variant
    int way;
    if(ways_in_other_L2_counter < NUM_WAY) {
        way = (priority[lru_way_in_LLC].second > priority[lru_way_in_R_L2].second) ? lru_way_in_LLC : lru_way_in_R_L2;
    }
    else {
        /* random sampling */
        way = getRand(0, NUM_WAY - 1);

    }
    return way;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    return lru_update(set, way);
}

void CACHE::llc_replacement_final_stats()
{
    
}